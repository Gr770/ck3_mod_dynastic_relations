
# Should be called when scoped to a character. Assumes that dynastic relation can be established
dr_establish_dynastic_relation_with_dynasty_of = {

    this = {

        set_variable = {
            name = dr_dynastic_relation_target
            value = $TARGET$
        }

        create_story = {
            type = dr_dynastic_relation_story
        } 

    }
}

# Will save the dynastic relation "object" in the current scope (as scope:dynastic_relation) between characters $A$ and $B$ 
dr_find_dynastic_relation_between_characters_and_save_in_scope = {

    $CHARACTER_A$.dynasty = {

        random_in_list = {
            variable = dr_dynasty_relations
            limit = {
                OR = {
                    AND = {
                        var:target = $CHARACTER_A$.dynasty
                        var:source = $CHARACTER_B$.dynasty
                    }
                    AND = {
                        var:source = $CHARACTER_A$.dynasty
                        var:target = $CHARACTER_B$.dynasty
                    }
                    
                }
            }
            
            save_scope_as = $SCOPE_NAME$
        }
    }
} 

dr_save_dynastic_relation_between_dynasties_in_scope = { 

    dr_find_dynastic_relation_between_characters_and_save_in_scope = {
        CHARACTER_A = $DYNASTY_A$.dynast
        CHARACTER_B = $DYNASTY_B$.dynast
        SCOPE_NAME = dynastic_relation
    }

    if = {
        limit = { NOT = { exists = scope:dynastic_relation } }
        save_scope_value_as = {
            name = $SCOPE_NAME$
            value = 0.0
        }
    }
    else = {
        save_scope_value_as = {
            name = $SCOPE_NAME$
            value = scope:dynastic_relation.var:value
        }
    }
 
}

# Changes (improves/degrades) dynastic relation based on the action being performed between two characters
# Expects CHARACTER_A, CHARACTER_B, REASON
dr_change_dynastic_relation_between_characters = {

    if = {
        limit = {
            dr_can_dynastic_relation_be_established_betwen_characters = {
                CHARACTER_A = scope:actor
                CHARACTER_B = scope:recipient
            }
        }
    
        $CHARACTER_A$.dynasty = {
            save_scope_as = source_dynasty
        }
        
        $CHARACTER_B$.dynasty = {
            save_scope_as = target_dynasty
        }

        $CHARACTER_A$ = {
            save_scope_as = source_character
        }
        
        $CHARACTER_B$ = {
            save_scope_as = target_character
        }
        
        $REASON$ = {
            save_scope_as = reason
        }

        $SHOW_AS$ = {
            save_scope_as = show_as
        }

        # Calculate dynastic relation impact and save it as change_val
        save_scope_value_as = {
            name = change_val
            value = dr_dynasty_relation_action_impact_value
        } 

        #Render proper description/tooltip.
        if = {
            limit = { scope:show_as = flag:tooltip }
            if = {
                limit = { scope:change_val > 0.0 }
                custom_tooltip = DR_IMPROVE_DYNASTY_RELATION_TOOLTIP
            }
            else = {
                custom_tooltip = DR_DEGRADE_DYNASTY_RELATION_TOOLTIP
            }
        }
        else_if = {
            limit = { scope:show_as = flag:description }
            if = {
                limit = { scope:change_val > 0.0 }
                custom_description_no_bullet = {
                    subject = scope:target_character
                    object = scope:source_character
                    value = scope:change_val
                    text=dr_relation_impact_positive_effect_text
                }
            }
            else = {
                custom_description_no_bullet = {
                    subject = scope:target_character
                    object = scope:source_character
                    value = scope:change_val
                    text=dr_relation_impact_negative_effect_text
            }
            }
        }


        
        # Establish dynastic relation if it doesnt exist yet
        dr_find_dynastic_relation_between_characters_and_save_in_scope = {
            CHARACTER_A = $CHARACTER_A$
            CHARACTER_B = $CHARACTER_B$
            SCOPE_NAME = dynastic_relation
        }
        if = {

            limit = { NOT = { exists = scope:dynastic_relation } }

            $CHARACTER_A$ = {
                dr_establish_dynastic_relation_with_dynasty_of = {
                    TARGET = $CHARACTER_B$
                } 
            }

            dr_find_dynastic_relation_between_characters_and_save_in_scope = {
                CHARACTER_A = $CHARACTER_A$
                CHARACTER_B = $CHARACTER_B$
                SCOPE_NAME = dynastic_relation
            }
        }

        # This is only executed when the action is performed
        if = {

            limit = {  exists = scope:dynastic_relation }

            scope:dynastic_relation = {

                change_variable = {
                    name = value
                    add = scope:change_val
                }
            
                # Updates friends/rival relation status
                dr_update_dynastic_relation_friends_rivals_status_effect = yes

                
                # Updates the opinion modifiers between all members of both dynasties
                dr_update_character_opinions_effect = yes
                

            }
        }

    }

    
}

dr_decal_all_dynastic_relations_effect = {
    every_in_global_list = {
        variable = dr_dynastic_relations
        dr_decay_dynastic_relation_value = yes
    }
}

# Decay dynastic relation towards the baseline, expects dynastic relation to be the current scope
dr_decay_dynastic_relation_value = {

    if = {
        #Dont do anything if already at 0
        limit = { NOT = {var:value = 0.0} }
        if = {
            limit = {
                var:value < 0
            }
    
            change_variable = {
                name = value
                add = dr_dynasty_relation_yearly_decay_value
            }
    
            if = {
                limit = {
                    var:value > 0
                }
    
                set_variable = {
                    name = value
                    value = 0.0
                }
    
            }
        }
        else = {
            change_variable = {
                name = value
                subtract = dr_dynasty_relation_yearly_decay_value
            }
    
            if = {
                limit = {
                    var:value < 0
                }
    
                set_variable = {
                    name = value
                    value = 0.0
                }
    
            }
        }
        dr_update_character_opinions_effect = yes
    }

    

}

 
# Updates the character opinions between all members of both dynasties, expects dynastic relation to be the current scope
dr_update_character_opinions_effect = {

    hidden_effect = {

        save_scope_as = current_dynasty_relation

        scope:current_dynasty_relation.var:source = {  
            
            every_dynasty_member = {

                save_scope_as = opinion_a

                scope:current_dynasty_relation.var:target = {
                    every_dynasty_member = {

                        save_scope_as = opinion_b

                        scope:opinion_a = {

                            remove_opinion = {
                                modifier = dr_dynasty_relation_opinion_modifier
                                target = scope:opinion_b
                            }
                            add_opinion = {
                                target = scope:opinion_b
                                modifier = dr_dynasty_relation_opinion_modifier
                                opinion = dr_dynasty_relation_opinion_value
                            }
                        } 

                        scope:opinion_b = {
                            remove_opinion = {
                                modifier = dr_dynasty_relation_opinion_modifier
                                target = scope:opinion_a
                            }
                            add_opinion = {
                                target = scope:opinion_a
                                modifier = dr_dynasty_relation_opinion_modifier
                                opinion = dr_dynasty_relation_opinion_value
                            }
                        }
                    
                    }
                }

            }
        }
    }

}


# Update the status of friendship/rivalry between both dynasties based on the current relation value
dr_update_dynastic_relation_friends_rivals_status_effect = {

    if = { # Set dynasties as friends if threshold is passed and they are not friends yet
        limit = { AND = { NOT = {exists = var:friends} var:value >= 50 } }
        set_variable = {name = friends value = 1}
        trigger_event = {  on_action = dr_on_action_dynasties_became_friends } 
    }
    else_if = { # Set dynasties as neutral (not friends) if value drops below the neutrality threshold and they are friends
        limit = { AND = { exists = var:friends var:value <= 40 } }
        trigger_event = {  on_action = dr_on_action_dynasties_stopped_being_friends } 
        remove_variable = friends
    }
    else_if = { # Set dynasties as rivals if threshold is passed and they are not rivals yet
        limit = { AND = { NOT = {exists = var:rivals} var:value <= -50 } }
        set_variable = {name = rivals value = 1}
        trigger_event = {  on_action = dr_on_action_dynasties_became_rivals } 
    }
    else_if = { # Set dynasties as neutral (not friends) if value drops below the neutrality threshold and they are friends
        limit = { AND = { exists = var:rivals var:value >= -40 } }
        trigger_event = {  on_action = dr_on_action_dynasties_stopped_being_rivals } 
        remove_variable = rivals
    }

}


#Set dynasty heads as friends. Expect the current dynastic relation to be the current scope
dr_set_dynasty_heads_as_friends_effect = {
    
    this.var:source.dynast = {
        if = {
            limit = { NOT = {
                has_relation_friend = prev.var:target.dynast
            }}
            set_relation_friend = prev.var:target.dynast
        }
    }
}

dr_notify_dynasty_heads_of_new_dynastic_friendship_effect = {
    # Notify dynasty heads
    this.var:source.dynast = {

        send_interface_message = {
            type = event_generic_good_text
            title = dr_dynasties_became_friends_interface_message_title
            desc = dr_dynasties_became_friends_interface_message_desc 
        }
    }

    this.var:target.dynast = {

        send_interface_message = {
            type = event_generic_good_text
            title = dr_dynasties_became_friends_interface_message_title
            desc = dr_dynasties_became_friends_interface_message_desc
        }
    }
}


#Set dynasty heads as friends. Expect the current dynastic relation to be the current scope
dr_set_dynasty_heads_as_rivals_effect = {
    
    this.var:source.dynast = {
        if = {
            limit = { NOT = {
                has_relation_rival = prev.var:target.dynast
            }}
            set_relation_rival = prev.var:target.dynast
        }
    }
}

dr_notify_dynasty_heads_of_new_dynastic_rivalry_effect = {
    # Notify dynasty heads
    this.var:source.dynast = {

        send_interface_message = {
            type = event_generic_bad_text
            title = dr_dynasties_became_rivals_interface_message_title
            desc = dr_dynasties_became_rivals_interface_message_desc 
        }
    }

    this.var:target.dynast = {

        send_interface_message = {
            type = event_generic_bad_text
            title = dr_dynasties_became_rivals_interface_message_title
            desc = dr_dynasties_became_rivals_interface_message_desc
        }
    }
}


dr_update_dynastic_relation_heads_friends_rivals_status_effects = {
    if = {
        limit = {exists = var:friends}
        dr_set_dynasty_heads_as_friends_effect = yes
    }
    else_if = {
        limit = {exists = var:rivals}
        dr_set_dynasty_heads_as_rivals_effect = yes
    }
}

#Dummy effect just to prevent compiler errors about unset flags (which happens since I'm using them as enums)
dr_internal_prevent_flag_warnings_effect = {

    set_variable = {
        name = test
        value = flag:debug_increase
    }

    set_variable = {
        name = test
        value = flag:debug_decrease
    }

    set_variable = {
        name = test
        value = flag:marriage
    }

    set_variable = {
        name = test
        value = flag:executed_prisoner
    }

    set_variable = {
        name = test
        value = flag:tooltip
    }

    set_variable = {
        name = test
        value = flag:description
    }

    this.var:test = {
        debug_log = "yes"
    }

}

#Can be executed directy in the debug console. Useful to test the join ally war interaction/effect
dr_debug_create_ally_and_war_situation_effect = {

    random_player = {
        save_scope_as = player
        debug_log_scopes = yes

        random_independent_ruler = {
            limit = {
                in_diplomatic_range = scope:player
                is_lowborn = no
            }

            save_scope_as = ally
            create_alliance = {
                target = scope:player
                allied_through_owner = this
	            allied_through_target = scope:player
            }

            random_independent_ruler = {
                limit = {
                    in_diplomatic_range = scope:player
                }
                start_war = {
                    casus_belli = "religious_war"
                    # target = scope:player
                    # target_title = scope:player.primary_title^
                    target = scope:ally
                    target_title = scope:ally.primary_title
                }
            }

        }
    }
}