
# Should be called when scoped to a character. Assumes that dynastic relation can be established
dr_establish_dynastic_relation_with_dynasty_of = {

    this = {

        set_variable = {
            name = dr_dynastic_relation_target
            value = $TARGET$
        }

        create_story = {
            type = dr_dynastic_relation_story
        } 

    }
}

# Will save the dynastic relation "object" in the current scope (as scope:dynastic_relation) between characters $A$ and $B$ 
dr_find_dynastic_relation_between_characters_and_save_in_scope = {

    $CHARACTER_A$.dynasty = {

        random_in_list = {
            variable = dr_dynasty_relations
            limit = {
                OR = {
                    AND = {
                        var:target = $CHARACTER_A$.dynasty
                        var:source = $CHARACTER_B$.dynasty
                    }
                    AND = {
                        var:source = $CHARACTER_A$.dynasty
                        var:target = $CHARACTER_B$.dynasty
                    }
                    
                }
            }
            
            save_scope_as = $SCOPE_NAME$
        }
    }
} 


# Changes (improves/degrades) dynastic relation based on the action being performed between two characters
# Expects CHARACTER_A, CHARACTER_B, REASON
dr_change_dynastic_relation_between_characters = {

    if = {
        limit = {
            dr_can_dynastic_relation_be_established_betwen_characters = {
                CHARACTER_A = $CHARACTER_A$
                CHARACTER_B = $CHARACTER_B$
            }
        }
    
        $CHARACTER_A$.dynasty = {
            save_scope_as = source_dynasty
        }
        
        $CHARACTER_B$.dynasty = {
            save_scope_as = target_dynasty
        }

        $CHARACTER_A$ = {
            save_scope_as = source_character
        }
        
        $CHARACTER_B$ = {
            save_scope_as = target_character
        }
        
        $REASON$ = {
            save_scope_as = reason
        }

        $SHOW_AS$ = {
            save_scope_as = show_as
        }

        
        # Calculate dynastic relation impact and save it as change_val
        save_scope_value_as = {
            name = change_val
            value = dr_dynasty_relation_action_impact_value
        }
        
        #Only called in --debug_mode
        dr_debug_log_dynastic_change = yes


        #Render proper description/tooltip.
        #Use a dynasty as scope to ensure the effect is shown under "others"
        scope:target_character.dynasty = {
            if = {
                limit = { scope:show_as = flag:tooltip }
                if = {
                    limit = { scope:change_val > 0.0 }
                    custom_tooltip = DR_IMPROVE_DYNASTY_RELATION_TOOLTIP
                }
                else = {
                    custom_tooltip = DR_DEGRADE_DYNASTY_RELATION_TOOLTIP
                }
            }
            else_if = {
                limit = { scope:show_as = flag:description }
                if = {
                    limit = { scope:change_val > 0.0 }
                    custom_description_no_bullet = {
                        subject = scope:target_character
                        object = scope:source_character
                        value = scope:change_val
                        text=dr_relation_impact_positive_effect_text
                    }
                }
                else = {
                    custom_description_no_bullet = {
                        subject = scope:target_character
                        object = scope:source_character
                        value = scope:change_val
                        text=dr_relation_impact_negative_effect_text
                }
                }
            }
        }
        
        #Clear scope before finding the relation
        clear_saved_scope = dynastic_relation
        
        # Establish dynastic relation if it doesnt exist yet
        dr_find_dynastic_relation_between_characters_and_save_in_scope = {
            CHARACTER_A = $CHARACTER_A$
            CHARACTER_B = $CHARACTER_B$
            SCOPE_NAME = dynastic_relation
        }
        if = {

            limit = { NOT = { exists = scope:dynastic_relation } }

            $CHARACTER_A$ = {
                dr_establish_dynastic_relation_with_dynasty_of = {
                    TARGET = $CHARACTER_B$
                } 
            }

            dr_find_dynastic_relation_between_characters_and_save_in_scope = {
                CHARACTER_A = $CHARACTER_A$
                CHARACTER_B = $CHARACTER_B$
                SCOPE_NAME = dynastic_relation
            }
        }

        
        

        # This is only executed when the action is performed
        if = {

            limit = {  
                exists = scope:dynastic_relation
            }

            #remove global variables related to GUI to force the refresh (trigger_when) of all relevant windows
            remove_global_variable = dr_dynasty_relations_current_dynasty
            remove_global_variable = dr_character_window_current_character

            #Record dynastic occurrence. Since it is a story, we need to put it somewhere
            $CHARACTER_A$ = {
                set_variable = { name = source_character value = scope:source_character}
                set_variable = { name = target_character value = scope:target_character}
                set_variable = { name = reason value = scope:reason}
                set_variable = { name = value value = scope:change_val}

                create_story = {
                    type = dr_dynastic_occurrence_story
                    save_scope_as = new_dynastic_occurrence
                }
                
            }

            scope:dynastic_relation = {
                add_to_variable_list = {
                    name = occurrences
                    target = scope:new_dynastic_occurrence
                }

                #If there are more than 8 occurrences in this dynastic relation, remove the first (oldest) one
                if = {
                    limit = {
                        any_in_list = { 
                            variable = occurrences 
                            count > 5
                        }
                    }
                    debug_log = "More than 5 occurrences for a dynastic relation, removing the first"
                    ordered_in_list = {
                        variable = occurrences
                        save_scope_as = occurrence_to_be_removed
                    }
                    remove_list_variable = {
                        name = occurrences
                        target = scope:occurrence_to_be_removed
                    }

                    scope:occurrence_to_be_removed = {
                        end_story = yes
                    }
                }

                set_variable = {
                    name = last_update_year
                    value = current_year
                }

                change_variable = {
                    name = value
                    add = scope:change_val
                }

                #Apply min/max restrictions
                if = {
                    limit = {var:value < dr_dynasty_relation_min_value}
                    set_variable = {name = value value = dr_dynasty_relation_min_value}
                }
                else_if = {
                    limit = {var:value > dr_dynasty_relation_max_value}
                    set_variable = {name = value value = dr_dynasty_relation_max_value}
                }
            
                # Updates friends/rival relation status
                dr_update_dynastic_relation_friends_rivals_status_effect = yes

                
                # Updates the opinion modifiers between all members of both dynasties
                dr_update_character_opinions_effect = yes
                

            }
        }

    }

    
}

dr_decal_all_dynastic_relations_effect = {
    every_in_global_list = {
        variable = dr_dynastic_relations
        dr_decay_dynastic_relation_value = yes
    }
}

# Decay dynastic relation towards the baseline, expects dynastic relation to be the current scope
# If a dynastic relation is at value 0.0 and hasn't been updated in 5 years, remove it completely. This will save memory and improve performance
dr_decay_dynastic_relation_value = {

    debug_log ="Decaying dynastic relation"

    save_scope_value_as = {
        name = last_update_year
        value = this.var:last_update_year
    }

    if = {
        #Dont do anything if already at 0
        limit = { NOT = {var:value = 0.0} }

        if = {
            limit = {
                var:value < 0
            }
    
            change_variable = {
                name = value
                add = dr_dynasty_relation_yearly_decay_value
            }
    
            if = {
                limit = {
                    var:value > 0
                }
    
                set_variable = {
                    name = value
                    value = 0.0
                }
    
            }
        }
        else = {
            change_variable = {
                name = value
                subtract = dr_dynasty_relation_yearly_decay_value
            }
    
            if = {
                limit = {
                    var:value < 0
                }
    
                set_variable = {
                    name = value
                    value = 0.0
                }
    
            }
        }
        dr_update_character_opinions_effect = yes
    }
    else_if = { # If a dynastic relation is at value 0.0 and hasn't been updated in 5 years, remove it completely. This will save memory and improve performance
        limit = {
            exists = this.var:last_update_year
            current_year > dr_dynastic_relation_last_update_year_plus_5
        }
        debug_log = "Removing dynastic relation since it has been netural for five years. Last update [THIS.Var('last_update_year').GetValue]"
        dr_remove_dynastic_relation = yes
    }
    else_if = { # If a dynastic relation is at 0.0 and it doesnt have the last_update_year variable, it means we are dealing with an old save. remove it
        limit = {
            NOT = {exists = this.var:last_update_year}
        }
        debug_log = "Removing dynastic relation since it doesnt have the last_update_year var"
        dr_remove_dynastic_relation = yes
    }

    

}


# Updates the character opinions between all members of both dynasties, expects dynastic relation to be the current scope
dr_update_character_opinions_effect = {

    hidden_effect = {

        save_scope_as = current_dynasty_relation

        scope:current_dynasty_relation.var:source = {  
            
            every_dynasty_member = {

                save_scope_as = opinion_a

                scope:current_dynasty_relation.var:target = {
                    every_dynasty_member = {

                        save_scope_as = opinion_b

                        scope:opinion_a = {

                            remove_opinion = {
                                modifier = dr_dynasty_relation_opinion_modifier
                                target = scope:opinion_b
                            }
                            add_opinion = {
                                target = scope:opinion_b
                                modifier = dr_dynasty_relation_opinion_modifier
                                opinion = dr_dynasty_relation_opinion_value
                            }
                        } 

                        scope:opinion_b = {
                            remove_opinion = {
                                modifier = dr_dynasty_relation_opinion_modifier
                                target = scope:opinion_a
                            }
                            add_opinion = {
                                target = scope:opinion_a
                                modifier = dr_dynasty_relation_opinion_modifier
                                opinion = dr_dynasty_relation_opinion_value
                            }
                        }
                    
                    }
                }

            }
        }
    }

}


# Update the status of friendship/rivalry between both dynasties based on the current relation value
dr_update_dynastic_relation_friends_rivals_status_effect = {

    if = { # Set dynasties as friends if threshold is passed and they are not friends yet
        limit = { AND = { NOT = {exists = var:friends} var:value >= dr_dynasty_relation_friends_threshold_value } }
        set_variable = {name = friends value = 1}
        trigger_event = {  on_action = dr_on_action_dynasties_became_friends } 
    }
    else_if = { # Set dynasties as neutral (not friends) if value drops below the neutrality threshold and they are friends
        limit = { AND = { exists = var:friends var:value <= dr_dynasty_relation_friends_to_neutral_threshold_value } }
        trigger_event = {  on_action = dr_on_action_dynasties_stopped_being_friends } 
        remove_variable = friends
    }
    else_if = { # Set dynasties as rivals if threshold is passed and they are not rivals yet
        limit = { AND = { NOT = {exists = var:rivals} var:value <= dr_dynasty_relation_rivals_threshold_value } }
        set_variable = {name = rivals value = 1}
        trigger_event = {  on_action = dr_on_action_dynasties_became_rivals } 
    }
    else_if = { # Set dynasties as neutral (not friends) if value drops below the neutrality threshold and they are friends
        limit = { AND = { exists = var:rivals var:value >= dr_dynasty_relation_rivals_to_neutral_threshold_value } }
        trigger_event = {  on_action = dr_on_action_dynasties_stopped_being_rivals } 
        remove_variable = rivals
    }

}


#Set dynasty heads as friends. Expect the current dynastic relation to be the current scope
dr_set_dynasty_heads_as_friends_effect = {
    
    this.var:source.dynast = {
        if = {
            limit = { NOT = {
                has_relation_friend = prev.var:target.dynast
            }}
            set_relation_friend = prev.var:target.dynast
        }
    }
}

dr_notify_dynasty_heads_of_new_dynastic_friendship_effect = {
    # Notify dynasty heads
    this.var:source.dynast = {

        send_interface_message = {
            type = event_generic_good_text
            title = dr_dynasties_became_friends_interface_message_title
            desc = dr_dynasties_became_friends_interface_message_desc 
        }
    }

    this.var:target.dynast = {

        send_interface_message = {
            type = event_generic_good_text
            title = dr_dynasties_became_friends_interface_message_title
            desc = dr_dynasties_became_friends_interface_message_desc
        }
    }
}


#Set dynasty heads as friends. Expect the current dynastic relation to be the current scope
dr_set_dynasty_heads_as_rivals_effect = {
    
    this.var:source.dynast = {
        if = {
            limit = { NOT = {
                has_relation_rival = prev.var:target.dynast
            }}
            set_relation_rival = prev.var:target.dynast
        }
    }
}

dr_notify_dynasty_heads_of_new_dynastic_rivalry_effect = {
    # Notify dynasty heads
    this.var:source.dynast = {

        send_interface_message = {
            type = event_generic_bad_text
            title = dr_dynasties_became_rivals_interface_message_title
            desc = dr_dynasties_became_rivals_interface_message_desc 
        }
    }

    this.var:target.dynast = {

        send_interface_message = {
            type = event_generic_bad_text
            title = dr_dynasties_became_rivals_interface_message_title
            desc = dr_dynasties_became_rivals_interface_message_desc
        }
    }
}


dr_update_dynastic_relation_heads_friends_rivals_status_effects = {
    if = {
        limit = {exists = var:friends}
        dr_set_dynasty_heads_as_friends_effect = yes
    }
    else_if = {
        limit = {exists = var:rivals}
        dr_set_dynasty_heads_as_rivals_effect = yes
    }
}

#Should only be used for dead dynasties
dr_remove_dynastic_relations_from_dynasty = {

    save_scope_as = dynasty_to_be_removed

    every_in_list = {

        variable = dr_dynasty_relations

        save_scope_as = dynastic_relation_to_be_removed

        dr_remove_dynastic_relation = yes
    }
}

dr_remove_dynastic_relation = {

    save_scope_as = dynastic_relation_to_be_removed

    remove_list_global_variable = {
        name = dr_dynastic_relations
        target = scope:dynastic_relation_to_be_removed
    }

    var:target = {
            
        remove_list_variable = {
            name = dr_dynasty_relations
            target = scope:dynastic_relation_to_be_removed
        }
    }

    var:source = {
        remove_list_variable = {
            name = dr_dynasty_relations
            target = scope:dynastic_relation_to_be_removed
        }
    }

    #Remove all occurences
    every_in_list = {
        variable = occurrences
        end_story = yes #Delete occurrence completelty
    }

    end_story = yes #Delete story completely
}

#Dummy effect just to prevent compiler errors about unset flags (which happens since I'm using them as enums)
dr_internal_prevent_flag_warnings_effect = {

    set_variable = {
        name = test
        value = flag:debug_increase_reason
    }

    set_variable = {
        name = test
        value = flag:debug_decrease_reason
    }

    set_variable = {
        name = test
        value = flag:marriage_reason
    }

    set_variable = {
        name = test
        value = flag:executed_prisoner_reason
    }
    
    set_variable = {
        name = test
        value = flag:imprison_tyrannical_reason
    }
    
    set_variable = {
        name = test
        value = flag:imprison_reason
    }
    
    set_variable = {
        name = test
        value = flag:divorce_reason
    }
    
    set_variable = {
        name = test
        value = flag:befriend_reason
    }
    
    set_variable = {
        name = test
        value = flag:break_betrothal_reason
    }
    
    set_variable = {
        name = test
        value = flag:grant_titles_reason
    }
    
    set_variable = {
        name = test
        value = flag:join_ally_war_reason
    }
    
    set_variable = {
        name = test
        value = flag:revoke_title_tyrannical_reason
    }
    
    set_variable = {
        name = test
        value = flag:revoke_title_reason
    }
    
    set_variable = {
        name = test
        value = flag:revoke_vassal_reason
    }
    
    set_variable = {
        name = test
        value = flag:declare_war_reason
    }

    set_variable = {
        name = test
        value = flag:tooltip
    }

    set_variable = {
        name = test
        value = flag:description
    }

    set_variable = {
        name = test
        value = flag:grant_independence_reason
    }
    

    set_variable = {
        name = test
        value = flag:extramarital_sex_reason
    }

    set_variable = {
        name = test
        value = flag:murder_reason
    }

    set_variable = {
        name = test
        value = flag:attempted_murder_reason
    }

    set_variable = {
        name = test
        value = flag:join_war_against_reason
    }
    
    set_variable = {
        name = test
        value = flag:tried_revoke_title_reason
    }

    this.var:test = {
        debug_log = "yes"
    }

}


dr_debug_log_dynastic_change = {
    if = {
        limit = {debug_only = yes}
        debug_log = "CHANGING DYNASTIC RELATION"
        set_global_variable = {name = reason value = scope:reason}
        set_global_variable = {name = source_character value = scope:source_character}
        set_global_variable = {name = target_character value = scope:target_character}
        set_global_variable = {name = change_val value = scope:change_val}
        debug_log = "Relation between [GetGlobalVariable('source_character').GetCharacter.GetName] and [GetGlobalVariable('target_character').GetCharacter.GetName] will change by [GetGlobalVariable('change_val').GetValue] because [GetGlobalVariable('reason').GetFlagName]"
        remove_global_variable = reason
        remove_global_variable = source_character
        remove_global_variable = target_character
        remove_global_variable = change_val
    }
}